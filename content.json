{"meta":{"title":"Alfmunny's Tech Blog","subtitle":null,"description":null,"author":"alfmunny","url":"https://alfmunny.github.io/hexo-blog"},"pages":[{"title":"about","date":"2016-11-13T17:04:45.000Z","updated":"2016-11-15T21:52:12.946Z","comments":true,"path":"about/index.html","permalink":"https://alfmunny.github.io/hexo-blog/about/index.html","excerpt":"","text":"This is me."}],"posts":[{"title":"1. Window","slug":"1-window","date":"2016-11-13T22:15:31.000Z","updated":"2016-11-21T01:49:46.825Z","comments":true,"path":"2016/11/13/1-window/","link":"","permalink":"https://alfmunny.github.io/hexo-blog/hexo-blog/2016/11/13/1-window/","excerpt":"","text":"Create ProjectCreate am empty visual C++ project in Visual Studio(Get Visual Studio). Add GLFWTo write a game engine, we start with the window at first. OpenGL doesn’t concern about the management of windows and inputs. Therefor we useGLFW to deal with it. GLFW is an Open Source, multi-platform library for OpenGL, which provides a simple API for creating window and receiving input. Following the steps to setup GLFW library. add dependenciesCreate a “Dependencies” directory in the root folder of the project. Download GLFW and put the library in “Dependencies”. includeAdd the include directory in the property. libraryAdd the library directory in the property. Main functionCreate a main.cpp in the root directory. 12345678910111213#include &lt;iostream&gt;#include &lt;GLFW/glfw3.h&gt;int main()&#123; if(!glwInit()) std::cout &lt;&lt; \"Failed the initialize GLFW\" &lt;&lt; std::endl; else std::cout &lt;&lt; \"Success!\" &lt;&lt; std::endl; system(\"PAUSE\"); return 0;&#125; Run it to see if the GLFW works as we expect. If it succeed, we can implement our first window. 1234567891011121314151617181920212223242526#include &lt;iostream&gt;#include &lt;GLFW/glfw3.h&gt;int main()&#123; if (!glfwInit()) return 1; //create a window with 800px width and 600px height, name it as what you like GLFWwindow *window = glfwCreateWindow(800, 600, \"MyEngine\", NULL, NULL); if (!window) &#123; std::cout &lt;&lt; \"Failed to initialize GLFW \" &lt;&lt; std::endl; return 1; &#125; glfwMakeContextCurrent(window); while (!glfwWindowShouldClose(window)) &#123; glfwPollEvents(); glfwSwapBuffers(window); &#125; glfwTerminate(); system(\"PAUSE\"); return 0;&#125; Now you should see a window. In the next chapter we are going to include the OpenGL Extension Wrangler Library and draw our first triangle.","categories":[{"name":"Game Engine","slug":"Game-Engine","permalink":"https://alfmunny.github.io/hexo-blog/categories/Game-Engine/"}],"tags":[{"name":"C++","slug":"C","permalink":"https://alfmunny.github.io/hexo-blog/tags/C/"},{"name":"game-engine","slug":"game-engine","permalink":"https://alfmunny.github.io/hexo-blog/tags/game-engine/"},{"name":"OpenGL","slug":"OpenGL","permalink":"https://alfmunny.github.io/hexo-blog/tags/OpenGL/"}],"keywords":[{"name":"Game Engine","slug":"Game-Engine","permalink":"https://alfmunny.github.io/hexo-blog/categories/Game-Engine/"}]},{"title":"Hello World","slug":"hello-world","date":"2016-11-13T21:47:50.161Z","updated":"2016-11-21T01:13:30.141Z","comments":true,"path":"2016/11/13/hello-world/","link":"","permalink":"https://alfmunny.github.io/hexo-blog/hexo-blog/2016/11/13/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[],"keywords":[]}]}