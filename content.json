{"meta":{"title":"Alfmunny's Tech Blog","subtitle":null,"description":null,"author":"alfmunny","url":"https://alfmunny.github.io/hexo-blog"},"pages":[{"title":"about","date":"2016-11-13T17:04:45.000Z","updated":"2016-11-15T21:52:12.946Z","comments":true,"path":"about/index.html","permalink":"https://alfmunny.github.io/hexo-blog/about/index.html","excerpt":"","text":"This is me."}],"posts":[{"title":"2. First Triangle","slug":"first-triangle","date":"2016-11-21T19:12:40.000Z","updated":"2016-11-23T00:07:54.811Z","comments":true,"path":"2016/11/21/first-triangle/","link":"","permalink":"https://alfmunny.github.io/hexo-blog/hexo-blog/2016/11/21/first-triangle/","excerpt":"","text":"Add GLEWGLEW The OpenGL Extension Wrangler Library (GLEW) is a cross-platform open-source C/C++ extension loading library. GLEW provides efficient run-time mechanisms for determining which OpenGL extensions are supported on the target platform. Download the library from the above link and add it to your project. Note: If you use the static library of GLEW - glew32s.lib, you have to set the GLEW_STATIC in the preprocessor. Otherwise it won’t work PointNow all is set, let’s draw one single point on in the window to get a sense of how OpenGL works. Include your library#include &lt;GL/glew.h&gt; Initialize GLEW1234if (glewInit() != GLEW_OK)&#123; return 1;&#125; Create the pointConsider the point is 3-dimensional point at (0.0, 0.0, 0.0). Use a vector to store it. 12vector&lt;vector&lt;float&gt;&gt; vertices(1);vertices[0] = vector&lt;float&gt;(0.0f, 0.0f, 0.0f); Generate a Vertex Buffer ObjectVertex Buffer Object is the way you send your data to GPU. We store our vertices data in the buffer and submit the buffer to GPU. 123GLuint VBO;glGenBuffers(1, &amp;VBO)// the first parameter is the how many Vertex Buffer Objects you want to generate. The second parameter is thre reference of the buffer. Bind bufferThe buffer is generated in a generic way. It doesn’t know what type of the data is. It’s the job of the next function to tell the buffer what we intend to do with the buffer. 123glBindBuffer(GL_ARRAY_BUFFER, VBO);// Tell GPU the data to store in it is an array of vertices. Bind dataNow we are going to bind our data to the buffer. 1glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW); Enable Vertex AttributesBy default of the pipeline, for vertices without shader the index we are referring to is 0.1glEnableVertexAttribArray(0); Interpretation of the dataTell GPU how to interpret the data in buffer. 1glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0); Draw the Point1glDrawArrays(GL_POINTS, 0, 1); Now you should see a point in the middle of the window.","categories":[{"name":"Game Engine","slug":"Game-Engine","permalink":"https://alfmunny.github.io/hexo-blog/categories/Game-Engine/"}],"tags":[{"name":"C++","slug":"C","permalink":"https://alfmunny.github.io/hexo-blog/tags/C/"},{"name":"game-engine","slug":"game-engine","permalink":"https://alfmunny.github.io/hexo-blog/tags/game-engine/"},{"name":"OpenGL","slug":"OpenGL","permalink":"https://alfmunny.github.io/hexo-blog/tags/OpenGL/"}],"keywords":[{"name":"Game Engine","slug":"Game-Engine","permalink":"https://alfmunny.github.io/hexo-blog/categories/Game-Engine/"}]},{"title":"1. Window","slug":"1-window","date":"2016-11-13T22:15:31.000Z","updated":"2016-11-21T01:49:46.825Z","comments":true,"path":"2016/11/13/1-window/","link":"","permalink":"https://alfmunny.github.io/hexo-blog/hexo-blog/2016/11/13/1-window/","excerpt":"","text":"Create ProjectCreate am empty visual C++ project in Visual Studio(Get Visual Studio). Add GLFWTo write a game engine, we start with the window at first. OpenGL doesn’t concern about the management of windows and inputs. Therefor we useGLFW to deal with it. GLFW is an Open Source, multi-platform library for OpenGL, which provides a simple API for creating window and receiving input. Following the steps to setup GLFW library. add dependenciesCreate a “Dependencies” directory in the root folder of the project. Download GLFW and put the library in “Dependencies”. includeAdd the include directory in the property. libraryAdd the library directory in the property. Main functionCreate a main.cpp in the root directory. 12345678910111213#include &lt;iostream&gt;#include &lt;GLFW/glfw3.h&gt;int main()&#123; if(!glwInit()) std::cout &lt;&lt; \"Failed the initialize GLFW\" &lt;&lt; std::endl; else std::cout &lt;&lt; \"Success!\" &lt;&lt; std::endl; system(\"PAUSE\"); return 0;&#125; Run it to see if the GLFW works as we expect. If it succeed, we can implement our first window. 1234567891011121314151617181920212223242526#include &lt;iostream&gt;#include &lt;GLFW/glfw3.h&gt;int main()&#123; if (!glfwInit()) return 1; //create a window with 800px width and 600px height, name it as what you like GLFWwindow *window = glfwCreateWindow(800, 600, \"MyEngine\", NULL, NULL); if (!window) &#123; std::cout &lt;&lt; \"Failed to initialize GLFW \" &lt;&lt; std::endl; return 1; &#125; glfwMakeContextCurrent(window); while (!glfwWindowShouldClose(window)) &#123; glfwPollEvents(); glfwSwapBuffers(window); &#125; glfwTerminate(); system(\"PAUSE\"); return 0;&#125; Now you should see a window. In the next chapter we are going to include the OpenGL Extension Wrangler Library and draw our first triangle.","categories":[{"name":"Game Engine","slug":"Game-Engine","permalink":"https://alfmunny.github.io/hexo-blog/categories/Game-Engine/"}],"tags":[{"name":"C++","slug":"C","permalink":"https://alfmunny.github.io/hexo-blog/tags/C/"},{"name":"game-engine","slug":"game-engine","permalink":"https://alfmunny.github.io/hexo-blog/tags/game-engine/"},{"name":"OpenGL","slug":"OpenGL","permalink":"https://alfmunny.github.io/hexo-blog/tags/OpenGL/"}],"keywords":[{"name":"Game Engine","slug":"Game-Engine","permalink":"https://alfmunny.github.io/hexo-blog/categories/Game-Engine/"}]},{"title":"Hello World","slug":"hello-world","date":"2016-11-13T21:47:50.161Z","updated":"2016-11-21T01:13:30.141Z","comments":true,"path":"2016/11/13/hello-world/","link":"","permalink":"https://alfmunny.github.io/hexo-blog/hexo-blog/2016/11/13/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[],"keywords":[]}]}